function  surface_parcellation_subsurf_nosmooth(tmasklist,outputdir,hems)
%Generate gradient-based parcellation on surface registered subject data
% This script requires a parcellation cohortfile file. The cohortfile includes
% a list of the subject names, the functional volume to be parcellated including
% its path, and the directory where the subject's surface is (as generated by 
% Freesurfer and registered to fs_LR space), formatted as:
% 
% subjectname funcpath/funcvol surfdir
% 
% e.g. 
%
% vc33416 /data/cn4/laumannt/vc33416_rest1.4dfp.img /data/cn4/segmentation/freesurfer5_supercomputer/FREESURFER_fs_LR/vc33416/7112b_fs_LR
%
% With 'tmasktype', users can enter a tmasklist.txt as created by
% fcimage_analysis to mask out timepoints in their data. Enter 'none' if no
% temporal mask is needed.
% If 'smooth' is set to  'yes' data will be smoothed along the cortical
% surface after surface projection. Enter 'no' if no surface smoothing is
% desired.
% With 'hems', users can specify that either the 'LEFT', 'RIGHT', or 'BOTH'
% hemispheres be parcellated.
% If 'edges' is set to 'yes' a final non-maxima suppression step will be
% applied to the gradient maps and an edge frequency map will be output in
% addition to an average gradient map. Enter 'no' if edge detection is not
% desired.
% This version of surface parcellation will always average correlation data
% from all subjects, generating a single gradient and/or edge map for the
% group.
% TOL 01/25/13

smoothnum = 2.55;
mask4dfp='/data/cn4/laumannt/Standard/glm_atlas_mask_333.4dfp.img';
%workbenchdir = 'env nice -n 4 /data/cn4/laumannt/workbench/bin_linux64/';
workbenchdir = 'nice /data/cn4/evan/workbench/bin_linux64/';
%roidir = '/data/cn4/laumannt/subcortical_mask';
%roidir = '/data/hcp-zfs/home/laumannt/120_parcellation';
roidir = '/data/cn4/laumannt/subcortical_mask';
HEMS = {'L';'R'};
hemname = {'LEFT';'RIGHT'};
hemname_low = {'left';'right'};



[subjects tmaskfiles]=textread(tmasklist,'%s%s');


switch hems
    case 'LEFT'
        h = 1;
        % Load medial wall mask
        medial_wall_L = gifti(['/data/cn5/selfRegulation/V4Process_nosmooth/L.atlasroi_group_noproj.func.gii']);
        medial_wall_L = medial_wall_L.cdata;
        cort_L_num = nnz(medial_wall_L==0);
    case 'RIGHT'
        h = 2;
        % Load medial wall mask
        medial_wall_R = gifti(['/data/cn5/selfRegulation/V4Process_nosmooth/R.atlasroi_group_noproj.func.gii']);
        medial_wall_R = medial_wall_R.cdata;
        medial_wall_L = gifti(['/data/cn5/selfRegulation/V4Process_nosmooth/L.atlasroi_group_noproj.func.gii']);
        medial_wall_L = medial_wall_L.cdata;
        cort_L_num = nnz(medial_wall_L==0);
        cort_R_num = nnz(medial_wall_R==0);
    case 'BOTH'
        h = [1:2];
        % Load medial wall mask
        medial_wall_L = gifti(['/data/cn5/selfRegulation/V4Process_nosmooth/L.atlasroi_group_noproj.func.gii']);
        medial_wall_L = medial_wall_L.cdata;
        medial_wall_R = gifti(['/data/cn5/selfRegulation/V4Process_nosmooth/R.atlasroi_group_noproj.func.gii']);
        medial_wall_R = medial_wall_R.cdata;
        cort_L_num = nnz(medial_wall_L==0);
        cort_R_num = nnz(medial_wall_R==0);
end

% switch hems
%     case 'LEFT'
%         h = 1;
%         % Load medial wall mask
%         medial_wall_L = gifti('/data/hcp-zfs/home/laumannt/120_parcellation/medial_exclude_L.func.gii');
%         medial_wall_L = medial_wall_L.cdata;
%         cort_L_num = nnz(medial_wall_L==0);
%     case 'RIGHT'
%         h = 2;
%         % Load medial wall mask
%         medial_wall_R = gifti('/data/hcp-zfs/home/laumannt/120_parcellation/medial_exclude_R.func.gii');
%         medial_wall_R = medial_wall_R.cdata;
%         medial_wall_L = gifti('/data/hcp-zfs/home/laumannt/120_parcellation/medial_exclude_L.func.gii');
%         medial_wall_L = medial_wall_L.cdata;
%         cort_L_num = nnz(medial_wall_L==0);
%         cort_R_num = nnz(medial_wall_R==0);
%     case 'BOTH'
%         h = [1:2];
%         % Load medial wall mask
%         medial_wall_L = gifti('/data/hcp-zfs/home/laumannt/120_parcellation/medial_exclude_L.func.gii');
%         medial_wall_L = medial_wall_L.cdata;
%         medial_wall_R = gifti('/data/hcp-zfs/home/laumannt/120_parcellation/medial_exclude_R.func.gii');
%         medial_wall_R = medial_wall_R.cdata;
%         cort_L_num = nnz(medial_wall_L==0);
%         cort_R_num = nnz(medial_wall_R==0);
% end

% Make output folder
system(['mkdir ' outputdir])

cd(outputdir)
for hem = h
    %templatefile = ['/data/hcp-zfs/home/laumannt/120_parcellation/gradients_cifti_smallwall_wateredge/120/avg_corrofcorr_' HEMS{hem} '.func.gii'];
    templatefile = ['/data/cn5/selfRegulation/V4Process_nosmooth/cifti_correlation_smallwall/template' HEMS{hem} '.func.gii'];
    if hem == 1
        cort_ind = 1:cort_L_num;
    elseif hem == 2
        cort_ind = (cort_L_num+1):(cort_L_num+cort_R_num);
    end
    % Load medial wall mask
    %medial_wall = gifti(['/data/hcp-zfs/home/laumannt/120_parcellation/medial_exclude_' HEMS{hem} '.func.gii']);
    medial_wall = gifti(['/data/cn5/selfRegulation/V4Process_nosmooth/' HEMS{hem} '.atlasroi_group_noproj.func.gii']);
    medial_wall = medial_wall.cdata;
    fullgrads = zeros(nnz(medial_wall==0));
    

    tic
    for s = 1:length(subjects)
        
        subject = subjects{s};
        %cifti_file = ['/data/cn4/evan/Task_parcellation/Manytasks_subregister/' subject '.dtseries.nii'];
        cifti_file = ['/data/cn5/selfRegulation/V4Process_nosmooth/cifti_smallwall_timeseries/' subject '_BOLD_LR_surf_subcort_32k_fsLR_smooth2.55.dtseries.nii'];
        surfdir = ['/data/cn4/segmentation/freesurfer5_supercomputer/FREESURFER_fs_LR/' subject '/7112b_fs_LR/'];
        midsurf_32k = [surfdir '/fsaverage_LR32k/' subject '.' HEMS{hem} '.midthickness.32k_fs_LR.surf.gii'];
        disp(['Processing subject #' num2str(s) ': ' subject])
        
        % Convert cifti to gifti and load timecourse
        disp('Calculating correlation maps')
%        evalc(['!' workbenchdir '/wb_command -cifti-convert -to-gifti-ext ' cifti_file '.dtseries.nii ' cifti_file '.func.gii']);
        
%        cifti_timecourse = gifti([cifti_file '.func.gii']);
%        cifti_timecourse = cifti_timecourse.cdata;
        cifti_timecourse = cifti_read(cifti_file);
        if strcmp(tmaskfiles{s},'none')
            tmask = ones(size(cifti_timecourse,2),1);
        else
            tmask = load(tmaskfiles{s});
        end
        
        
        % Calculate correlation maps
        %cifti_corrmap = corrcoef(cifti_timecourse(cort_ind,logical(tmask))');
        cifti_corrmap = paircorr_mod(cifti_timecourse(cort_ind,logical(tmask))',cifti_timecourse(:,logical(tmask))');
        disp('done')
        toc
        
        disp('Removing NaNs')
        cifti_corrmap(isnan(cifti_corrmap)) = 0;
        cifti_corrmap(isinf(cifti_corrmap)) = 0;
        
        % Calculate corr of corr
        disp('Calculating corr of corr')
        corrofcorr = corrcoef(cifti_corrmap');
        clear cifti_corrmap
        corrofcorr(isnan(corrofcorr)) = 0;
        disp('done')
        toc
        
        % Write out cifti file
        
        cifti_write_wHDR(corrofcorr,templatefile,['corrofcorr_' HEMS{hem}],'dconn')
        toc
        % Calculate gradients
        disp('Calculating gradient')
        gradsname = ['corrofcorr_allgrad_' HEMS{hem}];
        evalc(['!' workbenchdir '/wb_command -cifti-gradient ' outputdir '/corrofcorr_' HEMS{hem} '.dconn.nii COLUMN ' outputdir '/' gradsname '.dconn.nii -' hemname_low{hem} '-surface ' midsurf_32k ]);%' -surface-presmooth 2.55']);
        
        %         % Average gradients
        %         system([workbenchdir '/wb_command -cifti-reduce ' outputdir '/' gradsname '.dconn.nii MEAN ' outputdir '/' gradsname '_avg.dtseries.nii'])
        %
        
        % Convert gradients and load
        evalc(['!' workbenchdir '/wb_command -cifti-convert -to-gifti-ext ' outputdir '/' gradsname '.dconn.nii ' outputdir '/' gradsname '.func.gii'])
        grads = gifti([outputdir '/' gradsname '.func.gii']);
        toc
        
        % Add subject gradients to running average
        fullgrads = [fullgrads + grads.cdata];
        toc
    end
    
    
    % Average gradients across subjects
    fullgrads = fullgrads./length(subjects);
    
    % Save out average gradients
    
    gradsname = ['avg_corrofcorr_allgrad_' HEMS{hem}];
    cifti_write_wHDR(fullgrads,templatefile,gradsname,'dconn')
    clear fullgrads
    
    % Smooth gradients before edge detection
    atlasdir = '/data/cn4/laumannt/standard_mesh_atlases/Conte69_atlas.LR.32k_fs_LR_glasser'; % Use atlas surface now that data is averaged
    midsurf_32k = [atlasdir '/fsaverage_LR32k/Conte69.' HEMS{hem} '.midthickness.32k_fs_LR.surf.gii'];
    disp('Smoothing gradient')
      smooth = 2.55;
     system([workbenchdir '/wb_command -cifti-smoothing ' outputdir '/' gradsname '.dconn.nii ' num2str(smooth) ' 0 COLUMN ' outputdir '/' gradsname '_smooth' num2str(smooth) '.dconn.nii -' hemname_low{hem} '-surface ' midsurf_32k]);
%     
    % Average smooth gradients
    system([workbenchdir '/wb_command -cifti-reduce ' outputdir '/' gradsname '_smooth' num2str(smooth) '.dconn.nii MEAN ' outputdir '/' gradsname '_smooth' num2str(smooth) 'avg.dtseries.nii'])
    
    % Convert gradients and load
    evalc(['!' workbenchdir '/wb_command -cifti-convert -to-gifti-ext ' outputdir '/' gradsname '_smooth' num2str(smooth) '.dconn.nii ' outputdir '/' gradsname '_smooth' num2str(smooth) '.func.gii'])
    grads = gifti([outputdir '/' gradsname '_smooth' num2str(smooth) '.func.gii']);
    fullgrads_smooth = zeros(32492,nnz(medial_wall==0));
    fullgrads_smooth(~logical(medial_wall),:) = grads.cdata;
    clear grads
    
    % For nonmax edge calculation
        atlasdir = '/data/cn4/laumannt/standard_mesh_atlases/Conte69_atlas.LR.32k_fs_LR_glasser';
        specfile = [atlasdir '/fsaverage_LR32k/Conte69.' HEMS{hem} '.32k_fs_LR.c5.spec'];
    
    % Calculate edge maps
    
            disp('Calculating edges')
            fullgrads_medial = fullgrads_smooth;
            fullgrads_medial(logical(medial_wall),:) = 1000;
            minimametrics = metric_minima_all(fullgrads_medial,3);
            clear fullgrads_medial
            %Original water edge
            labels = watershed_algorithm_all_par(fullgrads_smooth,minimametrics,200,1);
            labels_avg = mean(labels==0,2);
            save(gifti(single(labels_avg)),[outputdir '/' gradsname '_smooth' num2str(smooth) '_wateredge_avg.func.gii']);
            
            save([outputdir '/labels_' HEMS{hem}],'labels','-v7.3');
            
%             % Water edge with below threshold edges removed
%             thresh = 0.01;%:.005:.04;
%             for t = 1:length(thresh)
%                 newlabels = watershed_edgeremover(labels,fullgrads_smooth,thresh(t));
%                 labels_avg = mean(newlabels,2);
%                 save(gifti(single(labels_avg)),[outputdir '/' gradsname '_smooth' num2str(smooth) '_wateredge_thresh' num2str(thresh(t)) '_avg.func.gii']);
%             end
%             
%             % Nonmaxima suppression-based edges
%             surface_edges_all_test_faster(fullgrads_smooth,specfile,outputdir,[gradsname '_edge_avg'],1);

    
    % system(['rm ' outputdir '/avg_corrofcorr_' HEMS{hem} '.dconn.nii'])
    % system(['rm ' outputdir '/' gradsname '_smooth' num2str(smooth) '.func.*']);
    % system(['rm ' outputdir '/' gradsname '.dconn.nii']);
    % system(['rm ' outputdir '/' gradsname '_smooth' num2str(smooth) '.dconn.nii'])
    
end
%exit